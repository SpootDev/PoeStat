version: '3.5'
# Volumes are HOST directory and then CONTAINER directory

services:
  # Main app server
  appserver:
    build:
      context: ./ComposePoeServer
      dockerfile: Dockerfile
      args:
        ALPMIRROR: dl-cdn.alpinelinux.org
        PIPMIRROR: pypi.python.org
    environment:
      - POSTGRES_DB_HOST=${DBHOST}
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - SECURE=${SECURE}
      # will init swarmip on server start, if specified
      - SWARMIP=${SWARMIP}
      - DEBUG=${DEBUG}
    container_name: poeserver
    depends_on:
      - pgbounce
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- python3 main_server_stash.py
    volumes:
      # server will generate ssl key for use by web/nginx
      - ./data/certs:/poedata/key
      # if swarmip init
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # server will generate salt/key
      - /var/opt/poedata/secure:/poedata/secure
    networks:
      - poe_network
     
  # Postgresql server
  database:
    build:
      context: ./ComposePoeDatabase
      args:
        ALPMIRROR: dl-cdn.alpinelinux.org
        PIPMIRROR: pypi.python.org
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
    container_name: poedatabase
    volumes:
      - ./poedata/postgresql:/var/lib/postgresql
    networks:
      - poe_network
    restart: unless-stopped

  # runs the nginx proxy service for ssl support
  nginx:
    build:
      context: ./ComposePoeNginx
      args:
        ALPMIRROR: dl-cdn.alpinelinux.org
        PIPMIRROR: pypi.python.org
    container_name: poenginx
    entrypoint: /usr/bin/wait-for-it-ash.sh -h webserver -p 8080 -t 30 -- nginx
    volumes:
      - ./poedata/nginx:/var/log/poe/nginx
      - ./poedata/certs:/etc/nginx/certs:ro
      - poe-static:/poe/web_app/poe/static:ro
    ports:
      - "8950:8900"
    networks:
      - poe_network
    restart: unless-stopped

  # pgbouncer
  pgbounce:
    build:
      context: ./ComposePoePGBouncer
      args:
        ALPMIRROR: dl-cdn.alpinelinux.org
        PIPMIRROR: pypi.python.org
    environment:
      - DB_HOST=${DBHOST}
      - DB_USER=${DBUSER}
      - DB_PASSWORD=${DBPASS}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=500
      - DEFAULT_POOL_SIZE=85
      - SERVER_RESET_QUERY=DISCARD ALL
    container_name: poepgbounce
    depends_on:
      - database
    entrypoint: ./wait-for-it-ash.sh -h database -p 5432 -t 30 -- ./entrypoint.sh
    networks:
      - poe_network
    restart: unless-stopped

  # runs the redis service for flask
  redis:
    build:
      context: ./ComposePoeRedis
      args:
        ALPMIRROR: dl-cdn.alpinelinux.org
        PIPMIRROR: pypi.python.org
    container_name: poeredis
    ports:
      - "6379:6379"
    networks:
      - poe_network
    restart: unless-stopped

  # Runs the web service for the main server application
  webserver:
    build:
      context: ./ComposePoeWebServer
      args:
        ALPMIRROR: dl-cdn.alpinelinux.org
        PIPMIRROR: pypi.python.org
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - SECURE=${SECURE}
      - HOST_IP=${HOST_IP}
    container_name: poewebapp
    depends_on:
      - pgbounce
      - redis
      - nginx
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- uwsgi --socket 0.0.0.0:8080 --protocol http --chdir=./web_app --ini ./web_app/uwsgi_alpine.ini
    volumes:
      # must not be read only as it stores cache here
      - poe-static:/poe/web_app/poe/static
      - ./data/webkey:/poe/key
      # needed to show docker/swarm info
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # hold log files
      - ./data/log:/poe/log
      # server will generate salt/key
      - /var/opt/poe/secure:/poe/secure:ro
    networks:
      - poe_network
    restart: unless-stopped

# Docker private networks
networks:
  poe_network:
    driver: bridge
    name: poe_network

volumes:
     poe-static:
